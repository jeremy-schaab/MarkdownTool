name: Build Windows Executable

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - debug
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'markdown_manager.spec'
      - 'scripts/build_exe.py'

jobs:
  build-windows-exe:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pyinstaller

    - name: Create default icon (if needed)
      run: |
        if (-not (Test-Path "assets\icon.ico")) {
          New-Item -ItemType Directory -Force -Path "assets"
          # Create a placeholder - in real usage, you'd have an actual icon
          Write-Host "Creating placeholder for icon"
        }
      shell: powershell

    - name: Build executable
      run: |
        python scripts/build_exe.py
      env:
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Test executable
      run: |
        if (Test-Path "dist\MarkdownManager.exe") {
          Write-Host "‚úÖ Executable created successfully"
          $fileSize = (Get-Item "dist\MarkdownManager.exe").Length / 1MB
          Write-Host "üìè File size: $([math]::Round($fileSize, 1)) MB"
          
          # Basic test - just check if it can show help
          try {
            & "dist\MarkdownManager.exe" --help 2>$null
            if ($LASTEXITCODE -eq 0) {
              Write-Host "‚úÖ Executable test passed"
            } else {
              Write-Host "‚ö†Ô∏è Executable test returned non-zero exit code but file exists"
            }
          } catch {
            Write-Host "‚ö†Ô∏è Could not test executable, but file was created"
          }
        } else {
          Write-Host "‚ùå Executable not found"
          exit 1
        }
      shell: powershell

    - name: Try to create professional installer
      run: |
        # Try to create installer with Inno Setup
        Write-Host "üîß Checking for Inno Setup..."
        
        $innoPath = @(
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe",
          "C:\Program Files\Inno Setup 6\ISCC.exe"
        ) | Where-Object { Test-Path $_ } | Select-Object -First 1
        
        if ($innoPath) {
          Write-Host "‚úÖ Found Inno Setup: $innoPath"
          
          # Create icon if possible
          try {
            pip install Pillow
            python assets/create_icon.py
            Write-Host "‚úÖ Icon created"
          } catch {
            Write-Host "‚ö†Ô∏è Could not create icon, using default"
          }
          
          # Build installer
          try {
            & $innoPath "installer\MarkdownManager.iss"
            if ($LASTEXITCODE -eq 0) {
              Write-Host "‚úÖ Professional installer created"
              $installerCreated = $true
            } else {
              Write-Host "‚ö†Ô∏è Installer build failed"
              $installerCreated = $false
            }
          } catch {
            Write-Host "‚ö†Ô∏è Could not run Inno Setup"
            $installerCreated = $false
          }
        } else {
          Write-Host "‚ö†Ô∏è Inno Setup not found, skipping installer creation"
          $installerCreated = $false
        }
      shell: powershell

    - name: Create release package
      run: |
        # Create release directory
        New-Item -ItemType Directory -Force -Path "release"
        
        # Copy executable
        Copy-Item "dist\MarkdownManager.exe" "release\MarkdownManager-Standalone.exe"
        
        # Copy simple installer script
        Copy-Item "dist\install.bat" "release\"
        
        # Copy professional installer if it exists
        if (Test-Path "installer\output\*.exe") {
          $installer = Get-ChildItem "installer\output\*.exe" | Select-Object -First 1
          Copy-Item $installer.FullName "release\"
          Write-Host "üì¶ Copied professional installer: $($installer.Name)"
        }
        
        # Copy documentation
        Copy-Item "README.md" "release\README.txt"
        Copy-Item "CHANGELOG.md" "release\CHANGELOG.txt"
        Copy-Item ".env.example" "release\"
        Copy-Item "docs\BUILDING_EXE.md" "release\BUILDING_EXE.txt"
        if (Test-Path "installer\LICENSE.txt") {
          Copy-Item "installer\LICENSE.txt" "release\"
        }
        
        # Create release notes
        $hasInstaller = Test-Path "installer\output\*.exe"
        $releaseNotes = @"
# Markdown Manager - Windows Release

## üöÄ Quick Start Options

"@

        if ($hasInstaller) {
          $installerName = (Get-ChildItem "installer\output\*.exe" | Select-Object -First 1).Name
          $releaseNotes += @"
### Option 1: Professional Installer (Recommended)
1. Download and run ``$installerName``
2. Follow the setup wizard
3. Launch from Start Menu or Desktop shortcut

"@
        }

        $releaseNotes += @"
### Option $(if ($hasInstaller) { "2" } else { "1" }): Standalone Executable
1. Download ``MarkdownManager-Standalone.exe``
2. Run directly (no installation needed)
3. (Optional) Run ``install.bat`` for shortcuts

## üìÅ Files Included
- ``MarkdownManager-Standalone.exe`` - Portable application
"@

        if ($hasInstaller) {
          $installerName = (Get-ChildItem "installer\output\*.exe" | Select-Object -First 1).Name
          $releaseNotes += "`n- ``$installerName`` - Professional installer with uninstaller"
        }

        $releaseNotes += @"
- ``install.bat`` - Simple installer for shortcuts
- ``README.txt`` - Full documentation
- ``.env.example`` - Configuration template
- ``LICENSE.txt`` - License information

## üí° First Run Notes
- First startup may take 15-30 seconds
- Windows Defender might ask for permission
- Creates ``data/``, ``logs/``, and ``sessions/`` folders
- For AI features, configure ``.env`` file

## üÜò Support
Visit: https://github.com/jeremy-schaab/MarkdownTool/issues
"@
        
        $releaseNotes | Out-File -FilePath "release\RELEASE-NOTES.txt" -Encoding UTF8
        
        Write-Host "üì¶ Release package created in release/ directory"
        Write-Host "Files created:"
        Get-ChildItem "release" | ForEach-Object { Write-Host "  - $($_.Name)" }
      shell: powershell

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MarkdownManager-Windows-${{ github.run_number }}
        path: |
          release/
        retention-days: 90

    - name: Create ZIP for release
      run: |
        Compress-Archive -Path "release\*" -DestinationPath "MarkdownManager-Windows-v${{ github.run_number }}.zip"
      shell: powershell

    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v3
      with:
        name: MarkdownManager-Windows-ZIP
        path: MarkdownManager-Windows-v${{ github.run_number }}.zip
        retention-days: 90

    # Only attach to release if this is a release event
    - name: Attach to Release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          MarkdownManager-Windows-v${{ github.run_number }}.zip
          release/MarkdownManager.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Build with different Python versions
  build-compatibility:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Test build compatibility
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pyinstaller
        
        # Just test that PyInstaller can analyze the spec
        pyinstaller --noconfirm --log-level WARN --distpath temp-dist --workpath temp-build markdown_manager.spec
        
        if (Test-Path "temp-dist\MarkdownManager.exe") {
          Write-Host "‚úÖ Build successful with Python ${{ matrix.python-version }}"
        } else {
          Write-Host "‚ùå Build failed with Python ${{ matrix.python-version }}"
          exit 1
        }
      shell: powershell